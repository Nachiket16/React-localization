{"ast":null,"code":"var _jsxFileName = \"/home/mintifi/Nachiket/GITHUB/React-localization/localization/src/index.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport i18n from \"i18next\";\nimport { useTranslation, initReactI18next } from \"react-i18next\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ni18n.use(initReactI18next) // passes i18n down to react-i18next\n.init({\n  // the translations\n  // (tip move them in a JSON file and import them,\n  // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n  resources: {\n    en: {\n      translation: {\n        \"Welcome to React\": \"Greetings from Mintifi!\"\n      }\n    },\n    hi: {\n      translation: {\n        \"Welcome to React\": \"मिंटिफ़ी से अभिवादन!\"\n      }\n    }\n  },\n  lng: document.querySelector('html').lang,\n  // if you're using a language detector, do not define the lng option\n  fallbackLng: \"en\"\n});\nfunction App() {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: t(\"Welcome to React\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 40,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","reportWebVitals","i18n","useTranslation","initReactI18next","jsxDEV","_jsxDEV","use","init","resources","en","translation","hi","lng","document","querySelector","lang","fallbackLng","App","_s","t","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","root","createRoot","getElementById","render","StrictMode","$RefreshReg$"],"sources":["/home/mintifi/Nachiket/GITHUB/React-localization/localization/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport i18n from \"i18next\";\nimport { useTranslation, initReactI18next } from \"react-i18next\";\n\nimport \"./index.css\";\n// import App from \"./App\";\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    // the translations\n    // (tip move them in a JSON file and import them,\n    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n    resources: {\n      en: {\n        translation: {\n          \"Welcome to React\": \"Greetings from Mintifi!\",\n        },\n      },\n      hi: {\n        translation: {\n          \"Welcome to React\": \"मिंटिफ़ी से अभिवादन!\",\n        },\n      },\n    },\n    lng: document.querySelector('html').lang, // if you're using a language detector, do not define the lng option\n    fallbackLng: \"en\"\n  });\n\nfunction App() {\n  const { t } = useTranslation();\n\n  return <h2>{t(\"Welcome to React\")}</h2>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,IAAI,MAAM,SAAS;AAC1B,SAASC,cAAc,EAAEC,gBAAgB,QAAQ,eAAe;AAEhE,OAAO,aAAa;AACpB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEAJ,IAAI,CACDK,GAAG,CAACH,gBAAgB,CAAC,CAAC;AAAA,CACtBI,IAAI,CAAC;EACJ;EACA;EACA;EACAC,SAAS,EAAE;IACTC,EAAE,EAAE;MACFC,WAAW,EAAE;QACX,kBAAkB,EAAE;MACtB;IACF,CAAC;IACDC,EAAE,EAAE;MACFD,WAAW,EAAE;QACX,kBAAkB,EAAE;MACtB;IACF;EACF,CAAC;EACDE,GAAG,EAAEC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAACC,IAAI;EAAE;EAC1CC,WAAW,EAAE;AACf,CAAC,CAAC;AAEJ,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM;IAAEC;EAAE,CAAC,GAAGjB,cAAc,CAAC,CAAC;EAE9B,oBAAOG,OAAA;IAAAe,QAAA,EAAKD,CAAC,CAAC,kBAAkB;EAAC;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACzC;AAACN,EAAA,CAJQD,GAAG;EAAA,QACIf,cAAc;AAAA;AAAAuB,EAAA,GADrBR,GAAG;AAMZ,MAAMS,IAAI,GAAG3B,QAAQ,CAAC4B,UAAU,CAACd,QAAQ,CAACe,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEF,IAAI,CAACG,MAAM,eACTxB,OAAA,CAACP,KAAK,CAACgC,UAAU;EAAAV,QAAA,eACff,OAAA,CAACY,GAAG;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;;AAED;AACA;AACA;AACAxB,eAAe,CAAC,CAAC;AAAC,IAAAyB,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}